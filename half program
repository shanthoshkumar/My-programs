pragma solidity ^0.4.0.;
contract Nutrition 
{
    struct Health
    {
        uint256 Customerid;
        uint256 Customersitemid;
        uint256 NumberofQuantity;
        uint256 CustomersTotalBillAmount;
        string Customername;
        uint256 ParticularProductQuantity;
    }
    string  []Itemname;
    uint256 []priceper;
    uint256 []TotalQuantity;
    uint256 []Item_Array;
    uint256 CustomersTotal;
    mapping(uint=>Health)key;
    function Production(uint256 _itemid,string _itemname,uint256 _itemprice,uint256 _total)public
    {
            Item_Array.push(_itemid);
            Itemname.push(_itemname);   
            priceper.push(_itemprice);
            key[_itemid].ParticularProductQuantity=_total;
    }
    function Items()public constant returns(uint256[])
    {
        return Item_Array;
    }
    function  Food_Serve(uint256 _cid,uint256 _itemid,uint256 _total)public returns(uint256,uint256,string)
    {   
        uint256 i;
            key[_cid].Customerid=_cid;
            key[_cid].Customersitemid=_itemid;
            key[_cid].NumberofQuantity=_total;
            while(i<key[_cid].NumberofQuantity)
            {
            key[_itemid].ParticularProductQuantity--;
            i++;
            }
            key[_cid].CustomersTotalBillAmount+=priceper[_itemid]*key[_cid].NumberofQuantity;
            return (key[_cid].Customerid,key[_cid].Customersitemid,Itemname[_itemid]);
    }
    function Bill(uint256 _cid,uint256 _itemid)public constant returns(uint256,string,uint256)
    {
        return (key[_cid].Customerid,Itemname[_itemid],key[_cid].CustomersTotalBillAmount);
    }
   function  View_Quantity(uint256 _itemid)public constant returns(string,uint256)
   {
       return (Itemname[_itemid],key[_itemid].ParticularProductQuantity);
   } 
}

